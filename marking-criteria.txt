Individual task (25%):

Marking Criteria
• MongoDB (4%)
o Have a MongoDB collection for lesson information - minimal fields:
topic, price, location, and space (2%). 👍
o Have a MongoDB collection for order information (2%) - minimal
fields: name, phone number, lesson ID, and number of spaces. 👍


• Middleware (4%)
o Create a ‘logger’ middleware that output all requests to the server
console (2%). 👍
o Create a static file middleware that returns lesson images, or an error
message if the image file does not exist (2%). 👍


• REST API (8%)
o A GET route that returns all the lessons (2%). 👍
o A POST route that saves a new order to the ‘order’ collection (2%).👍
o A PUT route that updates the number of available spaces in the 👍
‘lesson’ collection after an order is submitted (2%).
o At least one Postman request is created for each route (2%).


• Fetch (4%)
o A fetch that retrieves all the lessons with GET (1%). 👍
o A fetch that saves a new order with POST after it is submitted (1%).👍s
o A fetch that updates the available lesson space with PUT after an
order is submitted (2%). 👍


Extra Challenge

• Search (5%)
o This is the challenge component of this coursework, and it is not
expected that everyone can complete it. The solution is not covered
in the lecture or lab, so you need to research it.
o The goal is to add a full-text search feature, similarly to the challenge
component of Coursework 1. The difference is that here the search
needs to be performed in the back end (Express + MongoDB), not in
the front end as in Coursework 1 (where it was implemented via Vue
+ JavaScript).
o You cannot use any existing library to implement this function.
o Fetch (2%): in the front end, a ‘fetch’ request should be created to
send the search information to the back end.
o Express API (2%): an Express.js route should be created to handle
the search request and return the search results from MongoDB.
o Search as you type (1%): similarly to Coursework 1, there is also this
mark if the search supports ‘search as you type’, i.e. the search
starts when the user types the first letter (displaying all the lessons
containing that letter) and the result list is filtered as more search
letters are entered (similar to Google search).